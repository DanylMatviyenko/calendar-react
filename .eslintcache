[{"/mnt/d/Documents/NIX/calendar-react/src/index.js":"1","/mnt/d/Documents/NIX/calendar-react/src/App.js":"2","/mnt/d/Documents/NIX/calendar-react/src/Components/MonthSwitcher.js":"3","/mnt/d/Documents/NIX/calendar-react/src/Components/CalendarBase.js":"4","/mnt/d/Documents/NIX/calendar-react/src/inputData.js":"5"},{"size":449,"mtime":1610392096525,"results":"6","hashOfConfig":"7"},{"size":798,"mtime":1610618512000,"results":"8","hashOfConfig":"7"},{"size":1429,"mtime":1610466841626,"results":"9","hashOfConfig":"7"},{"size":2958,"mtime":1610618512001,"results":"10","hashOfConfig":"7"},{"size":2761,"mtime":1610618512003,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1s8iyjr",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"/mnt/d/Documents/NIX/calendar-react/src/index.js",[],["24","25"],"/mnt/d/Documents/NIX/calendar-react/src/App.js",[],"/mnt/d/Documents/NIX/calendar-react/src/Components/MonthSwitcher.js",[],"/mnt/d/Documents/NIX/calendar-react/src/Components/CalendarBase.js",["26"],"import React, { useState, useEffect } from 'react';\r\nimport {inputData} from \"../inputData\";\r\nimport classNames from 'classnames';\r\nimport isWeekend from 'date-fns/isWeekend';\r\nimport { format } from 'date-fns';\r\nimport uniqid from \"uniqid\";\r\n\r\nexport function CalendarBase(props) {\r\n    const { lastDayOfCurrentMonth } = props;\r\n    const [departmentTeams, setDepartmentTeams] = useState({\r\n        data: {},\r\n        isLoading: true\r\n    });\r\n    //const [isLoading, setIsLoading] = useState(true);\r\n\r\n    //handle request errors\r\n    useEffect(() => {\r\n        const getTeamsData = () => {\r\n            return fetch('https://jsonplaceholder.typicode.com/posts', {\r\n                method: 'POST',\r\n                body: JSON.stringify([inputData]),\r\n                headers: {\r\n                    'Content-type': 'application/json; charset=UTF-8',\r\n                },\r\n            })\r\n        }\r\n        setTimeout(() => {\r\n            getTeamsData()\r\n                .then((response) => response.json())\r\n                .then((dataObj) => {\r\n                    if(Object.keys(dataObj).length !== 0) {\r\n                        setDepartmentTeams({\r\n                            data: dataObj[0],\r\n                            isLoading: false\r\n                        });\r\n                    }\r\n                });\r\n        }, 2000)\r\n    }, []);\r\n    const CalendarHeader = () => {\r\n        return (\r\n            <thead>\r\n                <tr className=\"outputCalendar\">\r\n                    <td className=\"addVacationCell outputItem \">\r\n                        <button className=\"addVacationBtn\"><span>+</span>Add Vacation</button>\r\n                    </td>\r\n                    { [...Array(lastDayOfCurrentMonth.getDate()).keys()].map((element) => {\r\n                        const iDate = new Date(\r\n                            lastDayOfCurrentMonth.getFullYear(),\r\n                            lastDayOfCurrentMonth.getMonth(),\r\n                            ++element);\r\n                        return <HeaderDayCell cellDate={ iDate } key={ uniqid() }/>\r\n                    }) }\r\n                    <td className=\"sumCell outputItem\"><span className=\"calendar__text\">Sum</span></td>\r\n                </tr>\r\n            </thead>\r\n        );\r\n    }\r\n    const HeaderDayCell = (props) => {\r\n        const { cellDate } = props;\r\n\r\n        const headerDayCellClassName = classNames(\r\n            'outputItem',\r\n            { weekend: isWeekend(cellDate) }\r\n        );\r\n        return (\r\n            <td className={ headerDayCellClassName }>\r\n                <span className=\"outputDay\">{ format(cellDate, 'iiiiii') }</span>\r\n                <br />\r\n                <span className=\"outputDate\">{ cellDate.getDate() }</span>\r\n            </td>\r\n        );\r\n    }\r\n    return (\r\n        <section className=\"calendar\">\r\n            <table className=\"calendar__table\">\r\n                <CalendarHeader/>\r\n            </table>\r\n        </section>\r\n    );\r\n}\r\n","/mnt/d/Documents/NIX/calendar-react/src/inputData.js",[],{"ruleId":"27","replacedBy":"28"},{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","severity":1,"message":"32","line":10,"column":12,"nodeType":"33","messageId":"34","endLine":10,"endColumn":27},"no-native-reassign",["35"],"no-negated-in-lhs",["36"],"no-unused-vars","'departmentTeams' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]